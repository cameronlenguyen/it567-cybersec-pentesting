# portscanner.py
# created by Cameron LeNguyen using modified open source code on: 
# 	1) https://www.pythonforbeginners.com/code-snippets-source-code/port-scanner-in-python
# 	2) https://www.phillips321.co.uk/2014/08/12/python-port-scanner-nmap-py/
# Oct. 2018
import os
import socket
import subprocess
import sys
import argparse
from datetime import datetime
from scapy.all import *

def main():
	# Clear the screen
	os.system('cls')
	# Check what time the scan started
	t1 = datetime.now()

	# construct argument parse and parse the arguments
	argp = argparse.ArgumentParser()
	argp.add_argument("-sT", "--tcp", action="store_true",
		help="perform TCP scan")
	argp.add_argument("-sU", "--udp", action="store_true",
		help="perform UDP scan")
	argp.add_argument("-rT", "--traceroute", action="store_true",
		help="perform traceroute-like ping request")
	argp.add_argument("-t", "--targets",
		help="hosts to target")
	argp.add_argument("-p", "--ports",
		default='1-1024', help="ports to scan")
	argp.add_argument("-v", "--verbose", action="store_true",
		help="ports to scan")
	
		
	if len(sys.argv)==1: argp.print_help(); sys.exit(0)
	args = argp.parse_args()
	
	targets = []
	if args.targets:
		if '/' in args.targets:
			targets = returnCIDR(args.targets)
		elif '-' in args.targets:
			targets = iprange(args.targets)
		else:
			try: targets.append(socket.gethostbyname(args.targets))
			except: errormsg("Failed to obtain IP address of hostname")
	else: argp.print_help(); errormsg("A hostname must be entered")
	
	if args.ports == '-': args.ports = '1-65535'
	ranges = (x.split("-") for x in args.ports.split(","))
	ports = [i for r in ranges for i in range(int(r[0]), int(r[-1]) + 1)]
	
	for target in targets:
		tcpports, udpports = scanner(target,ports,args.tcp,args.udp,args.verbose)
		
	if args.traceroute:
		tracehop(targets)
		
	# Check time again
	t2 = datetime.now()
	total = t2 - t1
	print ("Scanning completed in: ", total)

def scanner(targets,ports,tcp,udp,verbose):
	tcpports = []
	udpports = []
	# Print a nice banner with information on which host we are about to scan
	print ("-" * 60)
	print ("Please wait, scanning remote hosts")
	print ("-" * 60)
	
	if tcp:
		for port in ports:
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.settimeout(0.01)
				sock.connect((targets, port))
			except KeyboardInterrupt:
				print ("Scan cancelled manually")
				sys.exit()
			except Exception:
				if verbose: print ("%d/tcp \tclosed" % (port))			
			else:
				print ("%d/tcp \topen" % (port))
				tcpports.append(port)
			sock.close()
	if udp:
		for port in ports:
			try:
				sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
				sock.settimeout(30.0)
				testmsg = "TESTING UDP".encode()
				sock.sendto(testmsg, (targets, port))
				recv, svr = sock.recvfrom(1024)
				print(recv)
			except Exception as e:
				print("Error message: ", e)
				print ("%d/udp \topen"% (port))
				udpports.append(port)
			else:
				if verbose: print ("%d/udp \tclosed" % (port))
			sock.close()
	if tcp or udp: print(("%i open TCP ports, %i open UDP ports of %i ports scanned" % (len(tcpports),len(udpports),len(ports))))
	return tcpports, udpports
	
def tracehop(ip):
	for i in range(1, 28):
		pkt = IP(dst=ip, ttl=i) / UDP(dport=33434)
		# Send the packet and get a reply
		reply = sr1(pkt, verbose=0)
		if reply is None:
			# No reply =(
			break
		elif reply.type == 3:
			# We've reached our destination
			print ("Done!", reply.src)
			break
		else:
			# We're in the middle somewhere
			print ("%d hops away: " % i , reply.src)
	
def iprange(addressrange):
	list = []
	first3octets = '.'.join(addressrange.split('-')[0].split('.')[:3]) + '.'
	for i in range(int(addressrange.split('-')[0].split('-')[3]),int(addressrange.split('-')[1])+1):
		list.append(first3octets+str(i))
	return list

def ip2bin(ip):
    b = ""
    inQuads = ip.split(".")
    outQuads = 4
    for q in inQuads:
        if q != "": b += dec2bin(int(q),8); outQuads -= 1
    while outQuads > 0: b += "00000000"; outQuads -= 1
    return b

def dec2bin(n,d=None):
    s = ""
    while n>0:
        if n&1: s = "1"+s
        else: s = "0"+s
        n >>= 1
    if d is not None:
        while len(s)<d: s = "0"+s
    if s == "": s = "0"
    return s

def bin2ip(b):
    ip = ""
    for i in range(0,len(b),8):
        ip += str(int(b[i:i+8],2))+"."
    return ip[:-1]

def returnCIDR(c):
    parts = c.split("/")
    baseIP = ip2bin(parts[0])
    subnet = int(parts[1])
    ips=[]
    if subnet == 32: return bin2ip(baseIP)
    else:
        ipPrefix = baseIP[:-(32-subnet)]
        for i in range(2**(32-subnet)): ips.append(bin2ip(ipPrefix+dec2bin(i, (32-subnet))))
        return ips

if __name__ == '__main__':
    main()